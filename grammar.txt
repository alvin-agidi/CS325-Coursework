program ::= extern_list decl decl_list

extern_list ::= extern extern_list | epsilon
extern ::= "extern" type_spec IDENT "(" params ")" ";"

decl_list ::= decl decl_list | epsilon
decl ::= "void" IDENT func_body | var_type IDENT decl_body
decl_body :: = ";" | func_body

var_type ::= "int" | "float" | "bool"

type_spec ::= "void" | var_type

func_body ::= "(" params ")" block

params ::= param param_list | epsilon
param_list ::= "," param param_list | epsilon
param ::= type_spec IDENT

block ::= "{" local_decl_list stmt_list "}" 

local_decl_list ::= local_decl local_decl_list | epsilon
local_decl ::= var_type IDENT ";"

stmt_list ::= stmt stmt_list | epsilon
stmt ::= expr_stmt 
    | if_stmt 
    | while_stmt 
    | return_stmt

expr_stmt ::= expr ";" | ";"

while_stmt ::= "while" "(" expr ")" stmt 

if_stmt ::= "if" "(" expr ")" block else_stmt

else_stmt  ::= "else" block | epsilon

return_stmt ::= "return" expr_stmt

expr ::= IDENT "=" expr | rval_1

# Operators in order of increasing precedence
rval_1 ::= rval_2 rval_1_list
rval_1_list ::= "||" rval_2 rval_1_list | epsilon
rval_2 ::= rval_3 rval_2_list
rval_2_list ::= "&&" rval_3 rval_2_list | epsilon
rval_3 ::= rval_4 rval_3_list
rval_3_list ::= "==" rval_4 rval_3_list | "!=" rval_4 rval_3_list | epsilon
rval_4 ::= rval_5 rval_4_list
rval_4_list ::= "<" rval_5 rval_4_list | "<=" rval_5 rval_4_list | ">" rval_5 rval_4_list | "=" rval_5 rval_4_list | epsilon
rval_5 ::= rval_6 rval_5_list
rval_5_list ::= "+" rval_6 rval_5_list | "-" rval_6 rval_5_list | epsilon
rval_6 ::= rval_term rval_6_list
rval_6_list ::= "*" rval_term rval_6_list | "/" rval_term rval_6_list | "%" rval_term rval_6_list | epsilon
rval_term ::= "-" expr
    | "!" expr
    | "(" expr ")"
    | IDENT ident_rval
    | INT_LIT | FLOAT_LIT | BOOL_LIT

ident_rval ::= "(" args ")" | epsilon

args ::= expr arg_list | epsilon
arg_list ::= "," expr arg_list | epsilon 
