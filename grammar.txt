program ::= extern_list decl decl_list

extern_list ::= extern extern_list | epsilon
extern ::= "extern" type_spec IDENT "(" params ")" ";"

decl_list ::= decl decl_list | epsilon
decl ::= "void" IDENT func_body | var_type IDENT decl_body
decl_body :: = ";" | func_body

var_type ::= "int" | "float" | "bool"

type_spec ::= "void" | var_type

func_body ::= "(" params ")" block

params ::= param param_list | epsilon
param_list ::= "," param param_list | epsilon
param ::= type_spec IDENT

block ::= "{" local_decl_list stmt_list "}" 

local_decl_list ::= local_decl local_decl_list | epsilon
local_decl ::= var_type IDENT ";"

stmt_list ::= stmt stmt_list | epsilon
stmt ::= expr_stmt 
    | if_stmt 
    | while_stmt 
    | return_stmt

expr_stmt ::= expr ";" | ";"

while_stmt ::= "while" "(" expr ")" stmt 

if_stmt ::= "if" "(" expr ")" block else_stmt

else_stmt  ::= "else" block | epsilon

return_stmt ::= "return" ";" | "return" expr ";"

# operators in order of increasing precedence
expr ::= IDENT ident_expr | rval_term_1 rval
ident_expr ::= "=" expr | ident_rval rval

ident_rval ::= "(" args ")" | epsilon

rval_term ::= IDENT ident_rval | rval_term_1
rval_term_1 ::= "-" rval_term
    | "!" rval_term
    | "(" expr ")"
    | INT_LIT | FLOAT_LIT | BOOL_LIT

rval ::= "||" rval_term rval
    | "&&" rval_term rval
    | "==" rval_term rval | "!=" rval_term rval
    | "<=" rval_term rval | "<" rval_term rval | ">=" rval_term rval | ">" rval_term rval
    | "+" rval_term rval | "-" rval_term rval
    | "*" rval_term rval | "/" rval_term rval | "%" rval_term rval | epsilon

args ::= expr arg_list | epsilon
arg_list ::= "," expr arg_list | epsilon 

# FIRST SETS

FIRST(program) = FIRST(extern_list) + FIRST(decl) = {"extern", epsilon, "void", "int", "float", "bool"}

FIRST(extern_list) = FIRST(extern) + {epsilon} = {"extern", epsilon}

FIRST(decl) = {"void"} + FIRST(var_decl) = {"void", "int", "float", "bool"}

FIRST(params) = FIRST(param) + {epsilon} = {"void", "int", "float", "bool", epsilon}

FIRST(param) = FIRST(type_spec) = {"void", "int", "float", "bool"}

FIRST(type_spec) = {"void"} + FIRST(var_decl) = {"void", "int", "float", "bool"}

FIRST(local_decl_list) = FIRST(local_decl) + {epsilon} = {epsilon, "int", "float", "bool"}

FIRST(local_decl) = FIRST(var_type) = {"int", "float", "bool"}

FIRST(stmt_list) = FIRST(stmt) + {epsilon} = {IDENT, "-", "!", "(", INT_LIT, FLOAT_LIT, BOOL_LIT, ";", "if", "while", "return", epsilon}

FIRST(stmt) = FIRST(expr_stmt) + FIRST(if_stmt) + FIRST(while_stmt) + FIRST(return_stmt) = {IDENT, "-", "!", "(", INT_LIT, FLOAT_LIT, BOOL_LIT, ";", "if", "while", "return"}

FIRST(expr_stmt) = FIRST(expr) + {";"} = {IDENT, "-", "!", "(", INT_LIT, FLOAT_LIT, BOOL_LIT, ";"}

FIRST(expr) = {IDENT} + FIRST(rval_term_1) = {IDENT, "-", "!", "(", INT_LIT, FLOAT_LIT, BOOL_LIT}

FIRST(rval_term_1) = {"-", "!", "(", INT_LIT, FLOAT_LIT, BOOL_LIT}

FIRST(rval_term) = {IDENT} + FIRST(rval_term_1) = {IDENT, "-", "!", "(", INT_LIT, FLOAT_LIT, BOOL_LIT}

FIRST(ident_expr) = {"="} + FIRST(ident_rval) = {"=", "(", epsilon}

FIRST(ident_rval) = {"(", epsilon}

FIRST(rval) = {"||"} + FIRST(rval_2) = {"||", "&&", "==", "!=", "<", "<=", ">", ">=", "+", "-", "*", "/", "%", epsilon}


FIRST(args) = FIRST(expr) + {epsilon} = {IDENT, "-", "!", "(", INT_LIT, FLOAT_LIT, BOOL_LIT, epsilon}

# FOLLOW SETS